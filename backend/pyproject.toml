[tool.poetry]
name = "subjunctive-practice-backend"
version = "1.0.0"
description = "FastAPI backend for Spanish Subjunctive Practice application"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.2"
uvicorn = {extras = ["standard"], version = "^0.27.1"}
pydantic = "^2.6.1"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.27"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
asyncpg = "^0.29.0"
redis = "^5.0.1"
hiredis = "^2.3.2"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.9"
bcrypt = "^4.1.2"
httpx = "^0.26.0"
aiohttp = "^3.9.3"
openai = "^1.12.0"
python-dotenv = "^1.0.1"
aiosmtplib = "^3.0.1"
jinja2 = "^3.1.3"
structlog = "^24.1.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.40.3"}
python-dateutil = "^2.8.2"
pyyaml = "^6.0.1"
orjson = "^3.9.15"
gunicorn = "^21.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.1"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.3"
faker = "^23.2.1"
black = "^25.9.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
isort = "^5.13.2"
pylint = "^3.0.3"
ipython = "^8.21.0"
ipdb = "^0.13.13"
watchdog = "^4.0.0"
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.9"
pre-commit = "^3.6.2"
httpie = "^3.2.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "passlib.*",
    "jose.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=. --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
env = [
    "ENVIRONMENT=testing",
    "DEBUG=false",
    "DATABASE_URL=postgresql+asyncpg://test:test@localhost:5432/test_db",
    "REDIS_URL=redis://localhost:6379/1",
    "JWT_SECRET_KEY=test_secret",
    "SESSION_SECRET_KEY=test_session",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
]

[tool.pylint.format]
max-line-length = 100

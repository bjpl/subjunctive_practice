[pytest]
# Pytest configuration for subjunctive practice backend

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 7.0

# Test paths
testpaths = tests

# Add backend directory to Python path
pythonpath = .

# Command line options
addopts =
    # Verbose output
    -v
    # Show extra test summary info
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Strict markers - only registered markers allowed
    --strict-markers
    # Coverage options
    --cov=backend
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    # Disable warnings capture
    --disable-warnings
    # Show slowest 10 tests
    --durations=10
    # Fail on first error (comment out for full test run)
    # -x

# Markers for categorizing tests
markers =
    unit: Unit tests for individual components
    integration: Integration tests for database and services
    api: API endpoint tests
    performance: Performance and load tests
    slow: Slow running tests
    auth: Authentication and authorization tests
    conjugation: Conjugation engine tests
    exercise: Exercise generation tests
    learning: Learning algorithm tests
    feedback: Feedback generation tests

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Ignore directories
norecursedirs = .git .tox dist build *.egg htmlcov __pycache__ .pytest_cache node_modules

# Timeout for tests (in seconds)
timeout = 300

# Asyncio mode
asyncio_mode = auto

# Coverage options
[coverage:run]
source = backend
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */alembic/*
    */migrations/*
    */scripts/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    if TYPE_CHECKING:
    if __name__ == .__main__.:
    @abstractmethod
    @abc.abstractmethod
    raise NotImplementedError
    raise AssertionError
    return NotImplemented

[coverage:html]
directory = htmlcov

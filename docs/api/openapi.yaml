openapi: 3.0.3
info:
  title: Spanish Subjunctive Practice API
  version: 1.0.0
  description: |
    Backend API for Spanish Subjunctive Practice Application using Task-Based Language Teaching (TBLT) methodology.

    ## Features
    - JWT-based authentication with refresh tokens
    - Spaced Repetition System (SRS) for optimized learning
    - AI-powered exercise generation and error analysis
    - Real-time progress tracking and analytics
    - WebSocket support for live updates

    ## Architecture
    - FastAPI framework with async/await
    - PostgreSQL database with SQLAlchemy ORM
    - Redis for caching and session management
    - OpenAI integration for intelligent tutoring

  contact:
    name: API Support
    email: support@subjunctivepractice.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.staging.subjunctivepractice.com
    description: Staging server
  - url: https://api.subjunctivepractice.com
    description: Production server

tags:
  - name: authentication
    description: User authentication and authorization
  - name: scenarios
    description: TBLT scenario management
  - name: exercises
    description: Exercise generation and validation
  - name: progress
    description: User progress tracking
  - name: analytics
    description: Learning analytics and insights
  - name: srs
    description: Spaced Repetition System
  - name: ai
    description: AI-powered learning features
  - name: health
    description: System health and monitoring

security:
  - bearerAuth: []

paths:
  # ==========================================
  # AUTHENTICATION ENDPOINTS
  # ==========================================

  /api/auth/register:
    post:
      tags: [authentication]
      summary: Register new user
      description: Create a new user account with email verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              newUser:
                value:
                  username: "juan_estudiante"
                  email: "juan@example.com"
                  password: "SecurePass123!"
                  first_name: "Juan"
                  last_name: "Estudiante"
                  bio: "Learning Spanish subjunctive for travel"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'
                  tokens:
                    $ref: '#/components/schemas/Token'
              examples:
                success:
                  value:
                    message: "User registered successfully"
                    user:
                      id: "550e8400-e29b-41d4-a716-446655440000"
                      username: "juan_estudiante"
                      email: "juan@example.com"
                      first_name: "Juan"
                      last_name: "Estudiante"
                      is_active: true
                      created_at: "2025-10-02T10:30:00Z"
                    tokens:
                      access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      token_type: "bearer"
                      expires_in: 1800
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags: [authentication]
      summary: User login
      description: Authenticate user and return access tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            examples:
              validCredentials:
                value:
                  username: "juan_estudiante"
                  password: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'
                  tokens:
                    $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/refresh:
    post:
      tags: [authentication]
      summary: Refresh access token
      description: Get a new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/logout:
    post:
      tags: [authentication]
      summary: User logout
      description: Invalidate current session
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /api/auth/me:
    get:
      tags: [authentication]
      summary: Get current user profile
      description: Retrieve authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/profile:
    put:
      tags: [authentication]
      summary: Update user profile
      description: Update authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/change-password:
    post:
      tags: [authentication]
      summary: Change password
      description: Change user's password (requires current password)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/auth/reset-password:
    post:
      tags: [authentication]
      summary: Request password reset
      description: Send password reset email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # ==========================================
  # SPACED REPETITION SYSTEM ENDPOINTS
  # ==========================================

  /api/srs/items/{item_id}/review:
    post:
      tags: [srs]
      summary: Submit practice item review
      description: |
        Record user's response and calculate next review interval using SM-2+ algorithm
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: string
            format: uuid
          description: Practice item UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
            examples:
              correctAnswer:
                value:
                  quality: 5
                  response_time_ms: 3500
                  user_answer: "hable"
                  expected_answer: "hable"
                  session_id: "session_123"
                  hints_used: 0
                  difficulty_perceived: 3
                  confidence_before: 4
                  confidence_after: 5
      responses:
        '200':
          description: Review processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
              examples:
                success:
                  value:
                    success: true
                    item_id: "550e8400-e29b-41d4-a716-446655440000"
                    quality_rating: 5
                    is_correct: true
                    next_review_date: "2025-10-05T10:30:00Z"
                    interval_days: 3
                    ease_factor: 2.6
                    mastery_level: 0.75
                    predicted_retention: 0.89
                    message: "Review processed. Next review in 3 days."
        '404':
          $ref: '#/components/responses/NotFound'

  /api/srs/batch-review:
    post:
      tags: [srs]
      summary: Submit multiple reviews
      description: Process multiple reviews in a single batch operation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchReviewRequest'
      responses:
        '200':
          description: Batch reviews processed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewResponse'

  /api/srs/due-items:
    get:
      tags: [srs]
      summary: Get due practice items
      description: Retrieve prioritized list of items ready for review
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum items to return
        - in: query
          name: include_overdue
          schema:
            type: boolean
            default: true
          description: Include overdue items
        - in: query
          name: difficulty_filter
          schema:
            type: string
            enum: [easy, normal, hard]
          description: Filter by difficulty level
        - in: query
          name: category_filter
          schema:
            type: string
          description: Filter by category
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [due_date, mastery, difficulty]
            default: due_date
          description: Sort criteria
      responses:
        '200':
          description: Due items retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DueItemsResponse'

  /api/srs/analytics/metrics:
    get:
      tags: [srs, analytics]
      summary: Get learning metrics
      description: Comprehensive learning analytics and performance insights
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [7d, 30d, 90d, all]
            default: 30d
          description: Time period for metrics
        - in: query
          name: include_predictions
          schema:
            type: boolean
            default: true
          description: Include retention predictions
      responses:
        '200':
          description: Learning metrics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningMetricsResponse'

  /api/srs/analytics/forgetting-curve/{item_id}:
    get:
      tags: [srs, analytics]
      summary: Get forgetting curve prediction
      description: Predict retention probability over time for specific item
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: days_ahead
          schema:
            type: integer
            minimum: 7
            maximum: 365
            default: 30
          description: Days to predict ahead
      responses:
        '200':
          description: Forgetting curve generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgettingCurveResponse'

  /api/srs/schedule/optimize:
    get:
      tags: [srs]
      summary: Optimize review schedule
      description: Get AI-optimized review schedule recommendations
      parameters:
        - in: query
          name: target_daily_reviews
          schema:
            type: integer
            minimum: 5
            maximum: 100
            default: 20
        - in: query
          name: optimize_for
          schema:
            type: string
            enum: [retention, efficiency, balance]
            default: retention
      responses:
        '200':
          description: Optimized schedule generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleOptimizationResponse'

  # ==========================================
  # AI-POWERED LEARNING ENDPOINTS
  # ==========================================

  /api/ai/exercise/generate:
    post:
      tags: [ai, exercises]
      summary: Generate AI-powered exercise
      description: |
        Create contextual Spanish subjunctive exercises using GPT-4.
        Includes adaptive difficulty and personalized content.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIExerciseRequest'
            examples:
              intermediate:
                value:
                  difficulty: "intermediate"
                  tense: "present"
                  topic: "travel"
                  previous_mistakes: ["quiere que voy", "espero que iré"]
                  student_id: "user_123"
      responses:
        '200':
          description: Exercise generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIExerciseResponse'
              examples:
                travelExercise:
                  value:
                    exercise_id: "ai_ex_20251002_103000"
                    sentence: "Es importante que tú _____ (llevar) pasaporte al aeropuerto."
                    correct_answer: "lleves"
                    options: ["lleves", "llevas", "llevarás", "llevarías"]
                    explanation: "After 'es importante que' we use present subjunctive because it expresses necessity."
                    tense: "present"
                    difficulty: "intermediate"
                    context: "Airport travel preparation"
                    learning_objective: "Practice present subjunctive in travel context"
                    estimated_time: 60
        '503':
          description: AI service unavailable

  /api/ai/error/analyze:
    post:
      tags: [ai]
      summary: Analyze student error
      description: AI-powered error analysis with pedagogical insights
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorAnalysisRequest'
      responses:
        '200':
          description: Error analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorAnalysisResponse'

  /api/ai/conversation/generate:
    post:
      tags: [ai]
      summary: Generate natural conversation
      description: Create authentic Spanish dialogues featuring subjunctive usage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationRequest'
      responses:
        '200':
          description: Conversation generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'

  /api/ai/feedback/adaptive:
    post:
      tags: [ai]
      summary: Generate adaptive feedback
      description: Personalized learning feedback based on performance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdaptiveFeedbackRequest'
      responses:
        '200':
          description: Feedback generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdaptiveFeedbackResponse'

  /api/ai/health:
    get:
      tags: [ai, health]
      summary: Check AI service health
      description: Monitor AI service availability and performance
      responses:
        '200':
          description: Health check complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/ai/capabilities:
    get:
      tags: [ai]
      summary: Get AI capabilities
      description: List available AI features and configurations
      responses:
        '200':
          description: Capabilities retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'

  # ==========================================
  # HEALTH & MONITORING ENDPOINTS
  # ==========================================

  /health:
    get:
      tags: [health]
      summary: Basic health check
      description: Simple health status endpoint
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  environment:
                    type: string
                    example: "production"
                  version:
                    type: string
                    example: "1.0.0"

  /api/health:
    get:
      tags: [health]
      summary: Comprehensive health check
      description: Detailed health check including database and Redis
      security: []
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    type: string
                    example: "healthy"
                  database:
                    type: string
                    example: "connected"
                  redis:
                    type: string
                    example: "connected"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /api/auth/login

  schemas:
    # ==========================================
    # AUTHENTICATION SCHEMAS
    # ==========================================

    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "juan_estudiante"
        email:
          type: string
          format: email
          example: "juan@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "SecurePass123!"
        first_name:
          type: string
          maxLength: 50
          example: "Juan"
        last_name:
          type: string
          maxLength: 50
          example: "Estudiante"
        bio:
          type: string
          maxLength: 500
          example: "Learning Spanish for travel"

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username or email
          example: "juan_estudiante"
        password:
          type: string
          format: password
          example: "SecurePass123!"

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          type: boolean
        is_superuser:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/UserResponse'
        - type: object
          properties:
            full_name:
              type: string
            display_name:
              type: string
            bio:
              type: string
            total_reviews:
              type: integer
            mastery_level:
              type: number
              format: float
            streak_days:
              type: integer

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        bio:
          type: string

    Token:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          default: "bearer"
        expires_in:
          type: integer
          description: Seconds until token expires
          example: 1800

    RefreshToken:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    PasswordChange:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
          minLength: 8

    PasswordReset:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    # ==========================================
    # SPACED REPETITION SCHEMAS
    # ==========================================

    ReviewRequest:
      type: object
      required:
        - quality
        - response_time_ms
      properties:
        quality:
          type: integer
          minimum: 0
          maximum: 5
          description: |
            Quality rating (0-5):
            0 = Complete blackout
            1 = Incorrect with effort
            2 = Incorrect but recognized
            3 = Correct with difficulty
            4 = Correct with hesitation
            5 = Perfect recall
        response_time_ms:
          type: integer
          minimum: 0
          description: Response time in milliseconds
        user_answer:
          type: string
        expected_answer:
          type: string
        session_id:
          type: string
        hints_used:
          type: integer
          default: 0
        difficulty_perceived:
          type: integer
          minimum: 1
          maximum: 5
        confidence_before:
          type: integer
          minimum: 1
          maximum: 5
        confidence_after:
          type: integer
          minimum: 1
          maximum: 5

    ReviewResponse:
      type: object
      properties:
        success:
          type: boolean
        item_id:
          type: string
          format: uuid
        quality_rating:
          type: integer
        is_correct:
          type: boolean
        next_review_date:
          type: string
          format: date-time
        interval_days:
          type: integer
        ease_factor:
          type: number
          format: float
        mastery_level:
          type: number
          format: float
        predicted_retention:
          type: number
          format: float
        message:
          type: string

    BatchReviewRequest:
      type: object
      required:
        - reviews
      properties:
        session_id:
          type: string
        reviews:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/ReviewRequest'
              - type: object
                required:
                  - item_id
                properties:
                  item_id:
                    type: string
                    format: uuid

    DueItemsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: string
                format: uuid
              tense:
                type: string
              category:
                type: string
              mastery_level:
                type: number
              due_date:
                type: string
                format: date-time
              overdue_hours:
                type: number
        total_due:
          type: integer
        overdue_count:
          type: integer
        average_mastery:
          type: number
          format: float
        recommended_session_size:
          type: integer
        estimated_time_minutes:
          type: number
        next_batch_available_at:
          type: string
          format: date-time
          nullable: true

    LearningMetricsResponse:
      type: object
      properties:
        metrics:
          type: object
          properties:
            total_items:
              type: integer
            items_mastered:
              type: integer
            average_mastery:
              type: number
            review_accuracy:
              type: number
            total_study_time:
              type: integer
            streak_days:
              type: integer
        period:
          type: string
        generated_at:
          type: string
          format: date-time
        additional_data:
          type: object

    ForgettingCurveResponse:
      type: object
      properties:
        item_id:
          type: string
          format: uuid
        current_retention:
          type: number
          format: float
        predictions:
          type: array
          items:
            type: object
            properties:
              day:
                type: integer
              retention_probability:
                type: number
        optimal_review_date:
          type: string
          format: date-time
        generated_at:
          type: string
          format: date-time

    ScheduleOptimizationResponse:
      type: object
      properties:
        recommendations:
          type: object
          properties:
            daily_target:
              type: integer
            optimal_time_slots:
              type: array
              items:
                type: string
            difficulty_distribution:
              type: object
        optimization_goal:
          type: string
        generated_at:
          type: string
          format: date-time

    # ==========================================
    # AI-POWERED LEARNING SCHEMAS
    # ==========================================

    AIExerciseRequest:
      type: object
      required:
        - difficulty
        - tense
      properties:
        difficulty:
          type: string
          enum: [beginner, intermediate, advanced]
        tense:
          type: string
          enum: [present, imperfect, perfect, pluperfect]
        topic:
          type: string
          example: "travel"
        previous_mistakes:
          type: array
          items:
            type: string
        student_id:
          type: string

    AIExerciseResponse:
      type: object
      properties:
        exercise_id:
          type: string
        sentence:
          type: string
        correct_answer:
          type: string
        options:
          type: array
          items:
            type: string
        explanation:
          type: string
        tense:
          type: string
        difficulty:
          type: string
        context:
          type: string
        learning_objective:
          type: string
        estimated_time:
          type: integer

    ErrorAnalysisRequest:
      type: object
      required:
        - student_answer
        - correct_answer
        - sentence
      properties:
        student_answer:
          type: string
        correct_answer:
          type: string
        sentence:
          type: string
        student_level:
          type: string
          enum: [beginner, intermediate, advanced]
        exercise_id:
          type: string
        student_id:
          type: string

    ErrorAnalysisResponse:
      type: object
      properties:
        error_type:
          type: string
        explanation:
          type: string
        correct_form:
          type: string
        rule_violated:
          type: string
        similar_examples:
          type: array
          items:
            type: string
        practice_suggestion:
          type: string
        difficulty_adjustment:
          type: string
        mastery_impact:
          type: number
          format: float

    ConversationRequest:
      type: object
      properties:
        difficulty:
          type: string
          enum: [beginner, intermediate, advanced]
        topic:
          type: string
        num_exchanges:
          type: integer
          minimum: 4
          maximum: 12
        focus_structures:
          type: array
          items:
            type: string
        cultural_context:
          type: string

    ConversationResponse:
      type: object
      properties:
        conversation_id:
          type: string
        dialogue:
          type: array
          items:
            type: object
            properties:
              speaker:
                type: string
              text:
                type: string
        context:
          type: string
        subjunctive_uses:
          type: array
          items:
            type: object
            properties:
              phrase:
                type: string
              explanation:
                type: string
        difficulty:
          type: string
        cultural_notes:
          type: array
          items:
            type: string
        follow_up_questions:
          type: array
          items:
            type: string
        estimated_reading_time:
          type: integer

    AdaptiveFeedbackRequest:
      type: object
      required:
        - student_id
        - performance_data
      properties:
        student_id:
          type: string
        performance_data:
          type: object
        learning_goals:
          type: array
          items:
            type: string
        previous_feedback:
          type: array
          items:
            type: string
        session_data:
          type: object
        time_spent:
          type: integer

    AdaptiveFeedbackResponse:
      type: object
      properties:
        feedback_message:
          type: string
        encouragement:
          type: string
        next_steps:
          type: array
          items:
            type: string
        focus_areas:
          type: array
          items:
            type: string
        estimated_mastery:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
        goals_progress:
          type: object
          additionalProperties:
            type: number
        recommended_exercises:
          type: array
          items:
            type: string
        study_plan:
          type: object

    HealthResponse:
      type: object
      properties:
        service_status:
          type: string
        openai_available:
          type: boolean
        api_connectivity:
          type: boolean
        cache_status:
          type: string
        last_health_check:
          type: string
          format: date-time
        fallback_ready:
          type: boolean
        response_time_ms:
          type: number

    CapabilitiesResponse:
      type: object
      properties:
        available_features:
          type: array
          items:
            type: string
        supported_languages:
          type: array
          items:
            type: string
        difficulty_levels:
          type: array
          items:
            type: string
        subjunctive_tenses:
          type: array
          items:
            type: string
        exercise_types:
          type: array
          items:
            type: string
        conversation_topics:
          type: array
          items:
            type: string
        max_requests_per_minute:
          type: integer
        estimated_cost_per_request:
          type: number

    # ==========================================
    # ERROR SCHEMAS
    # ==========================================

    Error:
      type: object
      required:
        - error
        - status_code
      properties:
        error:
          type: string
          description: Error message
        status_code:
          type: integer
          description: HTTP status code
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad request - Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid input parameters"
            status_code: 400

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid credentials"
            status_code: 401

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Insufficient permissions"
            status_code: 403

    NotFound:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource not found"
            status_code: 404

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            status_code: 500

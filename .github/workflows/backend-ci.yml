name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: backend/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV

      - name: Run database migrations
        working-directory: backend
        run: |
          alembic upgrade head || echo "Migrations failed, continuing..."

      - name: Run pytest
        working-directory: backend
        run: |
          pytest --cov=backend --cov-report=xml --cov-report=term-missing --cov-report=html -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-${{ matrix.python-version }}
          path: backend/htmlcov/
          retention-days: 7

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Run Black (code formatter check)
        working-directory: backend
        run: |
          black --check --diff .

      - name: Run isort (import sorting check)
        working-directory: backend
        run: |
          isort --check-only --diff .

      - name: Run Flake8 (linting)
        working-directory: backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run MyPy (type checking)
        working-directory: backend
        run: |
          mypy . --ignore-missing-imports --no-strict-optional || echo "MyPy found issues"

      - name: Run Pylint (code analysis)
        working-directory: backend
        run: |
          pylint backend --exit-zero --max-line-length=127

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit (security scanner)
        working-directory: backend
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt || echo "Security issues found"

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: backend/bandit-report.json
          retention-days: 30

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./backend
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: subjunctive-practice-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

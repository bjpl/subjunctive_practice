name: Deploy Frontend to Vercel

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  deploy-preview:
    name: Deploy to Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'preview'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend
        run: |
          npm run type-check
          npm run lint
          npm run test:coverage

      - name: Build application
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PREVIEW_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: preview
        run: npm run build

      - name: Deploy to Vercel (Preview)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Preview Deployment\n\nYour preview deployment is ready!\n\n**URL:** ${{ steps.deploy.outputs.preview-url }}\n\nCommit: ${{ github.sha }}`
            })

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.deploy.outputs.preview-url }}
            ${{ steps.deploy.outputs.preview-url }}/practice
            ${{ steps.deploy.outputs.preview-url }}/exercises
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run comprehensive tests
        working-directory: frontend
        run: |
          npm run type-check
          npm run lint -- --max-warnings=0
          npm run test:coverage
          npm run test:e2e

      - name: Build application
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: production
          NEXT_PUBLIC_ANALYTICS_ID: ${{ secrets.ANALYTICS_ID }}
        run: npm run build

      - name: Analyze bundle size
        working-directory: frontend
        run: |
          echo "### Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          du -sh .next/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Top 10 Largest Files:**" >> $GITHUB_STEP_SUMMARY
          find .next/static -type f -name "*.js" -exec du -h {} + | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY

      - name: Deploy to Vercel (Production)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Verify deployment
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.preview-url }} || exit 1

      - name: Run production smoke tests
        env:
          BASE_URL: ${{ steps.deploy.outputs.preview-url }}
        run: |
          # Test critical pages
          curl -f $BASE_URL/ || exit 1
          curl -f $BASE_URL/practice || exit 1
          curl -f $BASE_URL/exercises || exit 1

      - name: Run Lighthouse CI on production
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.deploy.outputs.preview-url }}
            ${{ steps.deploy.outputs.preview-url }}/practice
            ${{ steps.deploy.outputs.preview-url }}/exercises
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Frontend deployed to PRODUCTION: ${{ steps.deploy.outputs.preview-url }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Manual rollback required via Vercel dashboard."
          exit 1

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: frontend-v${{ github.run_number }}
          release_name: Frontend Release v${{ github.run_number }}
          body: |
            Automated frontend deployment to production
            Commit: ${{ github.sha }}
            Deployed to: ${{ steps.deploy.outputs.preview-url }}
          draft: false
          prerelease: false

name: CI - Tests and Quality Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run tests daily at 8 AM UTC
    - cron: '0 8 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_subjunctive_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-cd-pipeline
          ENVIRONMENT: test
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
        run: |
          alembic upgrade head

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ -m "unit" -v --tb=short

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ -m "integration" -v --tb=short

      - name: Run API tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ -m "api" -v --tb=short

      - name: Run all tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest --cov=backend --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment test summary on PR
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && github.event_name == 'pull_request'
        with:
          files: test-results.xml
          check_name: Test Results

  lint:
    name: Code Quality - Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint

      - name: Run Black formatter check
        run: |
          black --check --diff backend/ tests/

      - name: Run isort import check
        run: |
          isort --check-only --diff backend/ tests/

      - name: Run Flake8 linter
        run: |
          flake8 backend/ tests/ --max-line-length=120 --ignore=E203,W503

      - name: Run MyPy type checker
        run: |
          mypy backend/ --ignore-missing-imports --no-strict-optional

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scanner
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -ll

      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json || true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: subjunctive-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-metrics:
    name: Test Metrics
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Generate test metrics
        run: |
          python scripts/test_metrics.py

      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics
          path: test_metrics.json

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()

    steps:
      - name: Check job statuses
        run: |
          echo "Test: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"

      - name: Send notification on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "CI Pipeline failed. Please check the logs."
          echo "Run: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"

name: Deploy Backend to Railway

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Run tests
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENVIRONMENT: staging
        run: |
          pytest --cov=backend --cov-report=term-missing -v

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway (Staging)
        id: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
        run: |
          cd backend
          railway up --service backend-staging
          DEPLOY_URL=$(railway status --json | jq -r '.deployments[0].url')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Run database migrations
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
        run: |
          cd backend
          railway run alembic upgrade head

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Backend deployed to staging: ${{ steps.deploy.outputs.url }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    needs: []

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Run comprehensive tests
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENVIRONMENT: test
        run: |
          pytest --cov=backend --cov-report=term-missing --cov-fail-under=80 -v

      - name: Create deployment backup
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          echo "Creating database backup before deployment..."
          # Add backup commands here if Railway supports it

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway (Production)
        id: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          cd backend
          railway up --service backend-production
          DEPLOY_URL=$(railway status --json | jq -r '.deployments[0].url')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Run database migrations
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          cd backend
          railway run alembic upgrade head

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1

      - name: Smoke tests
        env:
          API_URL: ${{ steps.deploy.outputs.url }}
        run: |
          # Run critical endpoint tests
          curl -f $API_URL/api/v1/health || exit 1
          curl -f $API_URL/api/v1/conjugations/test || exit 1

      - name: Rollback on failure
        if: failure()
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          echo "Deployment failed, rolling back..."
          cd backend
          railway rollback

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Backend deployed to PRODUCTION: ${{ steps.deploy.outputs.url }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: backend-v${{ github.run_number }}
          release_name: Backend Release v${{ github.run_number }}
          body: |
            Automated backend deployment to production
            Commit: ${{ github.sha }}
            Deployed to: ${{ steps.deploy.outputs.url }}
          draft: false
          prerelease: false

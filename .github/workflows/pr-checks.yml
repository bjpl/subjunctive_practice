name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [main, master, develop]

env:
  PYTHON_VERSION: '3.11'

jobs:
  pr-metadata:
    name: PR Metadata Validation
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const changes = additions + deletions;

            core.info(`PR Changes: ${changes} (${additions} additions, ${deletions} deletions)`);

            if (changes > 1000) {
              core.warning('⚠️ This PR is quite large (>1000 changes). Consider splitting it into smaller PRs.');
            }

  quick-tests:
    name: Quick Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_subjunctive_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run quick unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_subjunctive_db
        run: |
          pytest tests/ -m "unit and not slow" --tb=short -v --maxfail=3

      - name: Fast lint check
        run: |
          black --check backend/ tests/
          isort --check-only backend/ tests/

  changed-files:
    name: Analyze Changed Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            backend/**/*.py
            tests/**/*.py

      - name: List changed Python files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed Python files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Check for test coverage
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ');
            const backendFiles = changedFiles.filter(f => f.startsWith('backend/') && !f.includes('__pycache__'));
            const testFiles = changedFiles.filter(f => f.startsWith('tests/'));

            core.info(`Backend files changed: ${backendFiles.length}`);
            core.info(`Test files changed: ${testFiles.length}`);

            if (backendFiles.length > 0 && testFiles.length === 0) {
              core.warning('⚠️ Backend code changed but no test files were modified. Consider adding tests.');
            }

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for dependency changes
        id: deps-changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            requirements.txt
            requirements-dev.txt

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        if: steps.deps-changed.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Verify requirements
        if: steps.deps-changed.outputs.any_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          pip-compile --dry-run requirements.txt
          pip install -r requirements.txt

      - name: Check for security vulnerabilities
        if: steps.deps-changed.outputs.any_changed == 'true'
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          cat safety-report.json

  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest

    steps:
      - name: Label based on files
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml

  pr-checklist:
    name: PR Checklist Validation
    runs-on: ubuntu-latest

    steps:
      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            const hasDescription = body.length > 50;
            const hasTestPlan = body.toLowerCase().includes('test plan') || body.toLowerCase().includes('testing');

            if (!hasDescription) {
              core.setFailed('❌ PR description is too short. Please provide more details.');
            }

            if (!hasTestPlan) {
              core.warning('⚠️ No test plan mentioned in PR description.');
            }

            core.info('✅ PR description validation complete');

  ready-to-merge:
    name: Ready to Merge Check
    runs-on: ubuntu-latest
    needs: [pr-metadata, quick-tests, changed-files, dependency-check]
    if: always()

    steps:
      - name: Check all jobs status
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'PR Metadata', result: '${{ needs.pr-metadata.result }}' },
              { name: 'Quick Tests', result: '${{ needs.quick-tests.result }}' },
              { name: 'Changed Files', result: '${{ needs.changed-files.result }}' },
              { name: 'Dependency Check', result: '${{ needs.dependency-check.result }}' }
            ];

            const failed = jobs.filter(j => j.result === 'failure');

            if (failed.length > 0) {
              core.setFailed(`❌ Some checks failed: ${failed.map(j => j.name).join(', ')}`);
            } else {
              core.info('✅ All PR checks passed! Ready for review.');
            }

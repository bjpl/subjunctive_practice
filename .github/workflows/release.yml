name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set release version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: |
            {
              "categories": [
                {
                  "title": "## Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "## Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## Performance",
                  "labels": ["performance", "optimization"]
                },
                {
                  "title": "## Dependencies",
                  "labels": ["dependencies"]
                }
              ],
              "template": "#{{CHANGELOG}}\n\n**Full Changelog**: #{{RELEASE_DIFF}}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build backend package
        working-directory: backend
        run: |
          pip install build
          python -m build

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Create distribution archives
        run: |
          mkdir -p dist
          tar -czf dist/backend-${{ needs.create-release.outputs.version }}.tar.gz backend/
          tar -czf dist/frontend-${{ needs.create-release.outputs.version }}.tar.gz frontend/.next/ frontend/public/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
          retention-days: 90

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts
          path: dist/

      - name: Deploy backend to production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          npm install -g @railway/cli
          cd backend
          railway up --service backend-production

      - name: Deploy frontend to production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend

      - name: Verify deployment
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }} || exit 1

      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'New release deployed to production: ${{ needs.create-release.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [deploy-release, docker-publish]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          echo "Release ${{ needs.create-release.outputs.version }} deployed successfully" >> RELEASES.md

      - name: Create follow-up issues
        uses: actions/github-script@v8
        with:
          script: |
            const version = '${{ needs.create-release.outputs.version }}';

            // Create issue for monitoring
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Monitor ${version} release`,
              body: `Monitor the health and performance of ${version} for 24 hours after deployment.`,
              labels: ['monitoring', 'release']
            });

      - name: Trigger documentation update
        run: |
          echo "Documentation update triggered for version ${{ needs.create-release.outputs.version }}"

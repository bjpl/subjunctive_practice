name: Integration Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run integration tests nightly at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  integration:
    name: Full Stack Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements*.txt

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-integration" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000" >> $GITHUB_ENV

      - name: Run database migrations
        working-directory: backend
        run: alembic upgrade head

      - name: Start backend server
        working-directory: backend
        run: |
          uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
          sleep 10

      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run backend integration tests
        working-directory: backend
        run: pytest tests/integration/ -v --tb=short

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Start frontend server
        working-directory: frontend
        run: |
          npm start &
          echo $! > frontend.pid
          sleep 15

      - name: Wait for frontend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Run E2E integration tests
        working-directory: frontend
        run: npm run test:e2e

      - name: Run API integration tests
        run: |
          # Test critical user flows
          curl -f http://localhost:8000/api/v1/health || exit 1
          curl -f http://localhost:8000/api/v1/conjugations || exit 1
          curl -f http://localhost:3000/ || exit 1

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            backend/htmlcov/
            frontend/coverage/
          retention-days: 7

      - name: Stop servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) || true
          fi

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: integration

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt
          pip install locust

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV

      - name: Run database migrations
        working-directory: backend
        run: alembic upgrade head

      - name: Start backend server
        working-directory: backend
        run: |
          uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run performance tests
        working-directory: backend
        run: pytest tests/ -m performance -v || echo "Performance tests completed"

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: backend/performance-results/
          retention-days: 30

  compatibility:
    name: Browser Compatibility Testing
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run tests on ${{ matrix.browser }}
        working-directory: frontend
        run: npx playwright test --project=${{ matrix.browser }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 7
